% $ biblatex auxiliary file $
% $ biblatex bbl format version 3.2 $
% Do not modify the above lines!
%
% This is an auxiliary file used by the 'biblatex' package.
% This file may safely be deleted. It will be recreated by
% biber as required.
%
\begingroup
\makeatletter
\@ifundefined{ver@biblatex.sty}
  {\@latex@error
     {Missing 'biblatex' package}
     {The bibliography requires the 'biblatex' package.}
      \aftergroup\endinput}
  {}
\endgroup


\refsection{0}
  \datalist[entry]{none/global//global/global}
    \entry{herlihy1991wait}{article}{}
      \name{author}{1}{}{%
        {{hash=dec3948f0497f5447bae5c2365b87e8f}{%
           family={Herlihy},
           familyi={H\bibinitperiod},
           given={Maurice},
           giveni={M\bibinitperiod}}}%
      }
      \list{location}{1}{%
        {New York, NY, USA}%
      }
      \list{publisher}{1}{%
        {Association for Computing Machinery}%
      }
      \strng{namehash}{dec3948f0497f5447bae5c2365b87e8f}
      \strng{fullhash}{dec3948f0497f5447bae5c2365b87e8f}
      \strng{bibnamehash}{dec3948f0497f5447bae5c2365b87e8f}
      \strng{authorbibnamehash}{dec3948f0497f5447bae5c2365b87e8f}
      \strng{authornamehash}{dec3948f0497f5447bae5c2365b87e8f}
      \strng{authorfullhash}{dec3948f0497f5447bae5c2365b87e8f}
      \field{sortinit}{1}
      \field{sortinithash}{4f6aaa89bab872aa0999fec09ff8e98a}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{abstract}{A wait-free implementation of a concurrent data object is one that guarantees that any process can complete any operation in a finite number of steps, regardless of the execution speeds of the other processes. The problem of constructing a wait-free implementation of one data object from another lies at the heart of much recent work in concurrent algorithms, concurrent data structures, and multiprocessor architectures. First, we introduce a simple and general technique, based on reduction to a concensus protocol, for proving statements of the form, “there is no wait-free implementation of X by Y.” We derive a hierarchy of objects such that no object at one level has a wait-free implementation in terms of objects at lower levels. In particular, we show that atomic read/write registers, which have been the focus of much recent attention, are at the bottom of the hierarchy: thay cannot be used to construct wait-free implementations of many simple and familiar data types. Moreover, classical synchronization primitives such astest&set and fetch&add, while more powerful than read and write, are also computationally weak, as are the standard message-passing primitives. Second, nevertheless, we show that there do exist simple universal objects from which one can construct a wait-free implementation of any sequential object.}
      \field{issn}{0164-0925}
      \field{journaltitle}{ACM Trans. Program. Lang. Syst.}
      \field{month}{1}
      \field{number}{1}
      \field{title}{Wait-free synchronization}
      \field{volume}{13}
      \field{year}{1991}
      \field{pages}{124\bibrangedash 149}
      \range{pages}{26}
      \verb{doi}
      \verb 10.1145/114005.102808
      \endverb
      \verb{urlraw}
      \verb https://doi.org/10.1145/114005.102808
      \endverb
      \verb{url}
      \verb https://doi.org/10.1145/114005.102808
      \endverb
      \keyw{wait-free synchronization,linearization}
    \endentry
    \entry{brandenburg2019multiprocessorrealtimelockingprotocols}{misc}{}
      \name{author}{1}{}{%
        {{hash=1c09f82fea4635ca943758d90dded01c}{%
           family={Brandenburg},
           familyi={B\bibinitperiod},
           given={Björn\bibnamedelima B.},
           giveni={B\bibinitperiod\bibinitdelim B\bibinitperiod}}}%
      }
      \strng{namehash}{1c09f82fea4635ca943758d90dded01c}
      \strng{fullhash}{1c09f82fea4635ca943758d90dded01c}
      \strng{bibnamehash}{1c09f82fea4635ca943758d90dded01c}
      \strng{authorbibnamehash}{1c09f82fea4635ca943758d90dded01c}
      \strng{authornamehash}{1c09f82fea4635ca943758d90dded01c}
      \strng{authorfullhash}{1c09f82fea4635ca943758d90dded01c}
      \field{sortinit}{1}
      \field{sortinithash}{4f6aaa89bab872aa0999fec09ff8e98a}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{eprintclass}{cs.DC}
      \field{eprinttype}{arXiv}
      \field{title}{Multiprocessor Real-Time Locking Protocols: A Systematic Review}
      \field{year}{2019}
      \verb{eprint}
      \verb 1909.09600
      \endverb
      \verb{urlraw}
      \verb https://arxiv.org/abs/1909.09600
      \endverb
      \verb{url}
      \verb https://arxiv.org/abs/1909.09600
      \endverb
    \endentry
    \entry{kode2024analysisSynchronization}{misc}{}
      \name{author}{2}{}{%
        {{hash=9754bcd51e4eb13c99f06d37181a6401}{%
           family={Kode},
           familyi={K\bibinitperiod},
           given={Oluwatoyin},
           giveni={O\bibinitperiod}}}%
        {{hash=5304e9e83c68b6c368eb8c8145e4d3eb}{%
           family={Oyemade},
           familyi={O\bibinitperiod},
           given={Temitope},
           giveni={T\bibinitperiod}}}%
      }
      \strng{namehash}{2bb35a8eb6b8b1324a7ee03101f203f4}
      \strng{fullhash}{2bb35a8eb6b8b1324a7ee03101f203f4}
      \strng{bibnamehash}{2bb35a8eb6b8b1324a7ee03101f203f4}
      \strng{authorbibnamehash}{2bb35a8eb6b8b1324a7ee03101f203f4}
      \strng{authornamehash}{2bb35a8eb6b8b1324a7ee03101f203f4}
      \strng{authorfullhash}{2bb35a8eb6b8b1324a7ee03101f203f4}
      \field{sortinit}{1}
      \field{sortinithash}{4f6aaa89bab872aa0999fec09ff8e98a}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{eprintclass}{cs.OS}
      \field{eprinttype}{arXiv}
      \field{title}{Analysis of Synchronization Mechanisms in Operating Systems}
      \field{year}{2024}
      \verb{eprint}
      \verb 2409.11271
      \endverb
      \verb{urlraw}
      \verb https://arxiv.org/abs/2409.11271
      \endverb
      \verb{url}
      \verb https://arxiv.org/abs/2409.11271
      \endverb
    \endentry
    \entry{kogan2012methodology}{article}{}
      \name{author}{2}{}{%
        {{hash=fdcad8e75af2ff8226f3804288eeebb7}{%
           family={Kogan},
           familyi={K\bibinitperiod},
           given={Alex},
           giveni={A\bibinitperiod}}}%
        {{hash=468fe0329ffeea43782aa0c27eaf16fe}{%
           family={Petrank},
           familyi={P\bibinitperiod},
           given={Erez},
           giveni={E\bibinitperiod}}}%
      }
      \list{location}{1}{%
        {New York, NY, USA}%
      }
      \list{publisher}{1}{%
        {Association for Computing Machinery}%
      }
      \strng{namehash}{4b9a61a33ee74fcc51fd2bd3b2ab3602}
      \strng{fullhash}{4b9a61a33ee74fcc51fd2bd3b2ab3602}
      \strng{bibnamehash}{4b9a61a33ee74fcc51fd2bd3b2ab3602}
      \strng{authorbibnamehash}{4b9a61a33ee74fcc51fd2bd3b2ab3602}
      \strng{authornamehash}{4b9a61a33ee74fcc51fd2bd3b2ab3602}
      \strng{authorfullhash}{4b9a61a33ee74fcc51fd2bd3b2ab3602}
      \field{extraname}{1}
      \field{sortinit}{2}
      \field{sortinithash}{8b555b3791beccb63322c22f3320aa9a}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{abstract}{Lock-freedom is a progress guarantee that ensures overall program progress. Wait-freedom is a stronger progress guarantee that ensures the progress of each thread in the program. While many practical lock-free algorithms exist, wait-free algorithms are typically inefficient and hardly used in practice. In this paper, we propose a methodology called fast-path-slow-path for creating efficient wait-free algorithms. The idea is to execute the efficient lock-free version most of the time and revert to the wait-free version only when things go wrong. The generality and effectiveness of this methodology is demonstrated by two examples. In this paper, we apply this idea to a recent construction of a wait-free queue, bringing the wait-free implementation to perform in practice as efficient as the lock-free implementation. In another work, the fast-path-slow-path methodology has been used for (dramatically) improving the performance of a wait-free linked-list.}
      \field{issn}{0362-1340}
      \field{journaltitle}{SIGPLAN Not.}
      \field{month}{2}
      \field{number}{8}
      \field{title}{A methodology for creating fast wait-free data structures}
      \field{volume}{47}
      \field{year}{2012}
      \field{pages}{141\bibrangedash 150}
      \range{pages}{10}
      \verb{doi}
      \verb 10.1145/2370036.2145835
      \endverb
      \verb{urlraw}
      \verb https://doi.org/10.1145/2370036.2145835
      \endverb
      \verb{url}
      \verb https://doi.org/10.1145/2370036.2145835
      \endverb
      \keyw{wait-free queues,non-blocking synchronization,lock-free algorithms,concurrent data structures}
    \endentry
    \entry{timnat2014practical}{article}{}
      \name{author}{2}{}{%
        {{hash=84f9c0b264838c1908e9cc43b1710c9c}{%
           family={Timnat},
           familyi={T\bibinitperiod},
           given={Shahar},
           giveni={S\bibinitperiod}}}%
        {{hash=468fe0329ffeea43782aa0c27eaf16fe}{%
           family={Petrank},
           familyi={P\bibinitperiod},
           given={Erez},
           giveni={E\bibinitperiod}}}%
      }
      \list{location}{1}{%
        {New York, NY, USA}%
      }
      \list{publisher}{1}{%
        {Association for Computing Machinery}%
      }
      \strng{namehash}{a9f179d63a4259afc8e169c0fd5d802e}
      \strng{fullhash}{a9f179d63a4259afc8e169c0fd5d802e}
      \strng{bibnamehash}{a9f179d63a4259afc8e169c0fd5d802e}
      \strng{authorbibnamehash}{a9f179d63a4259afc8e169c0fd5d802e}
      \strng{authornamehash}{a9f179d63a4259afc8e169c0fd5d802e}
      \strng{authorfullhash}{a9f179d63a4259afc8e169c0fd5d802e}
      \field{sortinit}{4}
      \field{sortinithash}{9381316451d1b9788675a07e972a12a7}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{abstract}{Lock-free data structures guarantee overall system progress, whereas wait-free data structures guarantee the progress of each and every thread, providing the desirable non-starvation guarantee for concurrent data structures. While practical lock-free implementations are known for various data structures, wait-free data structure designs are rare. Wait-free implementations have been notoriously hard to design and often inefficient. In this work we present a transformation of lock-free algorithms to wait-free ones allowing even a non-expert to transform a lock-free data-structure into a practical wait-free one. The transformation requires that the lock-free data structure is given in a normalized form defined in this work. Using the new method, we have designed and implemented wait-free linked-list, skiplist, and tree and we measured their performance. It turns out that for all these data structures the wait-free implementations are only a few percent slower than their lock-free counterparts, while still guaranteeing non-starvation.}
      \field{issn}{0362-1340}
      \field{journaltitle}{SIGPLAN Not.}
      \field{month}{2}
      \field{number}{8}
      \field{title}{A practical wait-free simulation for lock-free data structures}
      \field{volume}{49}
      \field{year}{2014}
      \field{pages}{357\bibrangedash 368}
      \range{pages}{12}
      \verb{doi}
      \verb 10.1145/2692916.2555261
      \endverb
      \verb{urlraw}
      \verb https://doi.org/10.1145/2692916.2555261
      \endverb
      \verb{url}
      \verb https://doi.org/10.1145/2692916.2555261
      \endverb
      \keyw{lock-freedom,wait-freedom}
    \endentry
    \entry{michael1996simple}{inproceedings}{}
      \name{author}{2}{}{%
        {{hash=7c8b91b67826da61ce9205a2176af631}{%
           family={Michael},
           familyi={M\bibinitperiod},
           given={Maged\bibnamedelima M.},
           giveni={M\bibinitperiod\bibinitdelim M\bibinitperiod}}}%
        {{hash=e15993060a5335650b18aea778baab54}{%
           family={Scott},
           familyi={S\bibinitperiod},
           given={Michael\bibnamedelima L.},
           giveni={M\bibinitperiod\bibinitdelim L\bibinitperiod}}}%
      }
      \list{location}{1}{%
        {Philadelphia, Pennsylvania, USA}%
      }
      \list{publisher}{1}{%
        {Association for Computing Machinery}%
      }
      \strng{namehash}{4658275f1fa4645788aca1c4501fcbe6}
      \strng{fullhash}{4658275f1fa4645788aca1c4501fcbe6}
      \strng{bibnamehash}{4658275f1fa4645788aca1c4501fcbe6}
      \strng{authorbibnamehash}{4658275f1fa4645788aca1c4501fcbe6}
      \strng{authornamehash}{4658275f1fa4645788aca1c4501fcbe6}
      \strng{authorfullhash}{4658275f1fa4645788aca1c4501fcbe6}
      \field{extraname}{1}
      \field{sortinit}{4}
      \field{sortinithash}{9381316451d1b9788675a07e972a12a7}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{booktitle}{Proceedings of the Fifteenth Annual ACM Symposium on Principles of Distributed Computing}
      \field{isbn}{0897918002}
      \field{series}{PODC '96}
      \field{title}{Simple, fast, and practical non-blocking and blocking concurrent queue algorithms}
      \field{year}{1996}
      \field{pages}{267\bibrangedash 275}
      \range{pages}{9}
      \verb{doi}
      \verb 10.1145/248052.248106
      \endverb
      \verb{urlraw}
      \verb https://doi.org/10.1145/248052.248106
      \endverb
      \verb{url}
      \verb https://doi.org/10.1145/248052.248106
      \endverb
      \keyw{compare_and_swap,concurrent queue,lock-free,multiprogramming,non-blocking}
    \endentry
    \entry{huang2002improvingWaitFree}{inproceedings}{}
      \name{author}{3}{}{%
        {{hash=8084383cdb4d636feec4a3c882da6cc5}{%
           family={Huang},
           familyi={H\bibinitperiod},
           given={Hai},
           giveni={H\bibinitperiod}}}%
        {{hash=f50104dc04bfb7759d8a0fe16e962ccc}{%
           family={Pillai},
           familyi={P\bibinitperiod},
           given={Padmanabhan},
           giveni={P\bibinitperiod}}}%
        {{hash=163411def426f522803d5a27828d3b8d}{%
           family={Shin},
           familyi={S\bibinitperiod},
           given={Kang\bibnamedelima G.},
           giveni={K\bibinitperiod\bibinitdelim G\bibinitperiod}}}%
      }
      \list{location}{1}{%
        {Monterey, CA}%
      }
      \list{publisher}{1}{%
        {USENIX Association}%
      }
      \strng{namehash}{29c02acb3fe7e157c43e393efe364336}
      \strng{fullhash}{2fe1a9044e8a25ee69bb9276258309d9}
      \strng{bibnamehash}{2fe1a9044e8a25ee69bb9276258309d9}
      \strng{authorbibnamehash}{2fe1a9044e8a25ee69bb9276258309d9}
      \strng{authornamehash}{29c02acb3fe7e157c43e393efe364336}
      \strng{authorfullhash}{2fe1a9044e8a25ee69bb9276258309d9}
      \field{sortinit}{4}
      \field{sortinithash}{9381316451d1b9788675a07e972a12a7}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{booktitle}{2002 USENIX Annual Technical Conference (USENIX ATC 02)}
      \field{month}{6}
      \field{title}{Improving {Wait-Free} Algorithms for Interprocess Communication in Embedded {Real-Time} Systems}
      \field{year}{2002}
      \verb{urlraw}
      \verb https://www.usenix.org/conference/2002-usenix-annual-technical-conference/improving-wait-free-algorithms-interprocess
      \endverb
      \verb{url}
      \verb https://www.usenix.org/conference/2002-usenix-annual-technical-conference/improving-wait-free-algorithms-interprocess
      \endverb
    \endentry
    \entry{pellegrini2020relevancewaitfreecoordinationalgorithms}{misc}{}
      \name{author}{2}{}{%
        {{hash=a45aae5d0803802d855ed58df3d1d8bb}{%
           family={Pellegrini},
           familyi={P\bibinitperiod},
           given={Alessandro},
           giveni={A\bibinitperiod}}}%
        {{hash=b549acaf1dad1fb12af921e040994e9e}{%
           family={Quaglia},
           familyi={Q\bibinitperiod},
           given={Francesco},
           giveni={F\bibinitperiod}}}%
      }
      \strng{namehash}{3d885ece90313a3083790b38ae0c5e95}
      \strng{fullhash}{3d885ece90313a3083790b38ae0c5e95}
      \strng{bibnamehash}{3d885ece90313a3083790b38ae0c5e95}
      \strng{authorbibnamehash}{3d885ece90313a3083790b38ae0c5e95}
      \strng{authornamehash}{3d885ece90313a3083790b38ae0c5e95}
      \strng{authorfullhash}{3d885ece90313a3083790b38ae0c5e95}
      \field{sortinit}{4}
      \field{sortinithash}{9381316451d1b9788675a07e972a12a7}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{eprintclass}{cs.DC}
      \field{eprinttype}{arXiv}
      \field{title}{On the Relevance of Wait-free Coordination Algorithms in Shared-Memory HPC:The Global Virtual Time Case}
      \field{year}{2020}
      \verb{eprint}
      \verb 2004.10033
      \endverb
      \verb{urlraw}
      \verb https://arxiv.org/abs/2004.10033
      \endverb
      \verb{url}
      \verb https://arxiv.org/abs/2004.10033
      \endverb
    \endentry
    \entry{xu2023rust}{inproceedings}{}
      \name{author}{4}{}{%
        {{hash=33a2fbf36484e35836ed60370fd8e8fd}{%
           family={Xu},
           familyi={X\bibinitperiod},
           given={Baowen},
           giveni={B\bibinitperiod}}}%
        {{hash=4b8df41dc7774e3e817b7f36316778f7}{%
           family={Chu},
           familyi={C\bibinitperiod},
           given={Bei},
           giveni={B\bibinitperiod}}}%
        {{hash=89bdf576c918495bb429c0720fc91730}{%
           family={Fan},
           familyi={F\bibinitperiod},
           given={Hongcheng},
           giveni={H\bibinitperiod}}}%
        {{hash=0bd795323e3d2f604e723e25b4a68fef}{%
           family={Feng},
           familyi={F\bibinitperiod},
           given={Yang},
           giveni={Y\bibinitperiod}}}%
      }
      \list{location}{1}{%
        {Chengdu, China}%
      }
      \list{publisher}{1}{%
        {Springer-Verlag}%
      }
      \strng{namehash}{2dd676bf89d5d0382e37fecfe94ea345}
      \strng{fullhash}{2cd98ab4ba3cb4b2688e03296f2e0438}
      \strng{bibnamehash}{2cd98ab4ba3cb4b2688e03296f2e0438}
      \strng{authorbibnamehash}{2cd98ab4ba3cb4b2688e03296f2e0438}
      \strng{authornamehash}{2dd676bf89d5d0382e37fecfe94ea345}
      \strng{authorfullhash}{2cd98ab4ba3cb4b2688e03296f2e0438}
      \field{sortinit}{5}
      \field{sortinithash}{20e9b4b0b173788c5dace24730f47d8c}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{abstract}{Memory safety is a critical concern in software development, as related issues often lead to program crashes, vulnerabilities, and security breaches, leading to severe consequences for applications and systems. This paper provides a detailed analysis of how Rust effectively addresses memory safety concerns. The paper first introduces the concepts of ownership, reference and lifetime in Rust, highlighting how they contribute to ensuring memory safety. It then delves into an examination of common memory safety issues and how they manifest in popular programming languages. Rust’s solutions to these issues are compared to those of other languages, emphasizing the benefits of using Rust for enhanced memory safety. In conclusion, this paper offers a comprehensive exploration of prevalent memory safety issues in programming and demonstrates how Rust effectively addresses them. With its encompassing mechanisms and strict rules, Rust proves to be a reliable choice for developers aiming to achieve enhanced memory safety in their programming endeavors.}
      \field{booktitle}{Web Information Systems and Applications: 20th International Conference, WISA 2023, Chengdu, China, September 15–17, 2023, Proceedings}
      \field{isbn}{978-981-99-6221-1}
      \field{title}{An Analysis of the Rust Programming Practice for Memory Safety Assurance}
      \field{year}{2023}
      \field{pages}{440\bibrangedash 451}
      \range{pages}{12}
      \verb{doi}
      \verb 10.1007/978-981-99-6222-8_37
      \endverb
      \verb{urlraw}
      \verb https://doi.org/10.1007/978-981-99-6222-8_37
      \endverb
      \verb{url}
      \verb https://doi.org/10.1007/978-981-99-6222-8_37
      \endverb
      \keyw{Memory safety,Rust,Ownership,Reference}
    \endentry
    \entry{sharma2024rustembeddedsystemscurrent}{misc}{}
      \name{author}{4}{}{%
        {{hash=431cb60d5d599981559a991c644cc04c}{%
           family={Sharma},
           familyi={S\bibinitperiod},
           given={Ayushi},
           giveni={A\bibinitperiod}}}%
        {{hash=82bc9bf618db0da9f54457b53a91ea18}{%
           family={Sharma},
           familyi={S\bibinitperiod},
           given={Shashank},
           giveni={S\bibinitperiod}}}%
        {{hash=e853f42f6f4956b17c21ede3c49eddb5}{%
           family={Torres-Arias},
           familyi={T\bibinithyphendelim A\bibinitperiod},
           given={Santiago},
           giveni={S\bibinitperiod}}}%
        {{hash=731d4b71cd36ca1d9c468bc496ea1353}{%
           family={Machiry},
           familyi={M\bibinitperiod},
           given={Aravind},
           giveni={A\bibinitperiod}}}%
      }
      \strng{namehash}{5175a83483367918e424714996ce25f2}
      \strng{fullhash}{6047e803f3af89233fb7ed49872af5bb}
      \strng{bibnamehash}{6047e803f3af89233fb7ed49872af5bb}
      \strng{authorbibnamehash}{6047e803f3af89233fb7ed49872af5bb}
      \strng{authornamehash}{5175a83483367918e424714996ce25f2}
      \strng{authorfullhash}{6047e803f3af89233fb7ed49872af5bb}
      \field{sortinit}{5}
      \field{sortinithash}{20e9b4b0b173788c5dace24730f47d8c}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{eprintclass}{cs.CR}
      \field{eprinttype}{arXiv}
      \field{title}{Rust for Embedded Systems: Current State, Challenges and Open Problems (Extended Report)}
      \field{year}{2024}
      \verb{eprint}
      \verb 2311.05063
      \endverb
      \verb{urlraw}
      \verb https://arxiv.org/abs/2311.05063
      \endverb
      \verb{url}
      \verb https://arxiv.org/abs/2311.05063
      \endverb
    \endentry
    \entry{HardSoftRealTime}{inbook}{}
      \name{author}{3}{}{%
        {{hash=1dcd945ad8c729f7a378c70d2d4a19de}{%
           family={Kavi},
           familyi={K\bibinitperiod},
           given={Krishna},
           giveni={K\bibinitperiod}}}%
        {{hash=38cd90afed387246274943a899d36898}{%
           family={Akl},
           familyi={A\bibinitperiod},
           given={Robert},
           giveni={R\bibinitperiod}}}%
        {{hash=d835080bcec2319814961343f600720b}{%
           family={Hurson},
           familyi={H\bibinitperiod},
           given={Ali},
           giveni={A\bibinitperiod}}}%
      }
      \strng{namehash}{db42535bade69a916c40dd482edb62d9}
      \strng{fullhash}{2a5902d19cc7d273185232eb039bb1f9}
      \strng{bibnamehash}{2a5902d19cc7d273185232eb039bb1f9}
      \strng{authorbibnamehash}{2a5902d19cc7d273185232eb039bb1f9}
      \strng{authornamehash}{db42535bade69a916c40dd482edb62d9}
      \strng{authorfullhash}{2a5902d19cc7d273185232eb039bb1f9}
      \field{sortinit}{6}
      \field{sortinithash}{b33bc299efb3c36abec520a4c896a66d}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{isbn}{9780470050118}
      \field{month}{03}
      \field{title}{Real‐Time Systems: An Introduction and the State‐of‐the‐Art}
      \field{year}{2009}
      \verb{doi}
      \verb 10.1002/9780470050118.ecse344
      \endverb
    \endentry
    \entry{BrakeByWire}{article}{}
      \name{author}{8}{}{%
        {{hash=6d0d33a049087876f09c6eaaf3a1da88}{%
           family={Hua},
           familyi={H\bibinitperiod},
           given={Xuehui},
           giveni={X\bibinitperiod}}}%
        {{hash=b4c0336ba09a68e0e5a750d182beacf2}{%
           family={Zeng},
           familyi={Z\bibinitperiod},
           given={Jinbin},
           giveni={J\bibinitperiod}}}%
        {{hash=a65bf344dd53e07eca0aa929775ae35b}{%
           family={Li},
           familyi={L\bibinitperiod},
           given={Haoxin},
           giveni={H\bibinitperiod}}}%
        {{hash=c615c319dc4da1b095f5b32e69a80c1a}{%
           family={Huang},
           familyi={H\bibinitperiod},
           given={Jingkai},
           giveni={J\bibinitperiod}}}%
        {{hash=1e5b61bc85ec5319d5ac57c788125d39}{%
           family={Luo},
           familyi={L\bibinitperiod},
           given={Maolin},
           giveni={M\bibinitperiod}}}%
        {{hash=2a072ae07cdff3dbce0c99c3bf5dd05f}{%
           family={Feng},
           familyi={F\bibinitperiod},
           given={Xiaoming},
           giveni={X\bibinitperiod}}}%
        {{hash=a419e32b801913b6999d7b579ec89749}{%
           family={Xiong},
           familyi={X\bibinitperiod},
           given={Huiyuan},
           giveni={H\bibinitperiod}}}%
        {{hash=3ac2e699df35184895ad9294ee2de586}{%
           family={Wu},
           familyi={W\bibinitperiod},
           given={Weibin},
           giveni={W\bibinitperiod}}}%
      }
      \strng{namehash}{f24f117bbaaf142bf384bda3f24dab08}
      \strng{fullhash}{f1b8ab25a0b2da5c35bedec87abe550e}
      \strng{bibnamehash}{f1b8ab25a0b2da5c35bedec87abe550e}
      \strng{authorbibnamehash}{f1b8ab25a0b2da5c35bedec87abe550e}
      \strng{authornamehash}{f24f117bbaaf142bf384bda3f24dab08}
      \strng{authorfullhash}{f1b8ab25a0b2da5c35bedec87abe550e}
      \field{sortinit}{9}
      \field{sortinithash}{0a5ebc79d83c96b6579069544c73c7d4}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{journaltitle}{Processes}
      \field{month}{03}
      \field{title}{A Review of Automobile Brake-by-Wire Control Technology}
      \field{volume}{11}
      \field{year}{2023}
      \field{pages}{994}
      \range{pages}{1}
      \verb{doi}
      \verb 10.3390/pr11040994
      \endverb
    \endentry
    \entry{IPC}{misc}{}
      \field{sortinit}{1}
      \field{sortinithash}{4f6aaa89bab872aa0999fec09ff8e98a}
      \field{labeltitlesource}{title}
      \field{howpublished}{\url{https://www.geeksforgeeks.org/inter-process-communication-ipc/}}
      \field{title}{Inter Process Communication (IPC)}
      \field{year}{2025}
    \endentry
    \entry{IPCMechanisms}{inproceedings}{}
      \name{author}{2}{}{%
        {{hash=0989f033c794cc516b653e1c2a35d74c}{%
           family={Venkataraman},
           familyi={V\bibinitperiod},
           given={Aditya},
           giveni={A\bibinitperiod}}}%
        {{hash=a8770570314c306f85a85458bf5695f4}{%
           family={Jagadeesha},
           familyi={J\bibinitperiod},
           given={Kishore\bibnamedelima Kumar},
           giveni={K\bibinitperiod\bibinitdelim K\bibinitperiod}}}%
      }
      \strng{namehash}{719faded4591961d8ed2ddc1ff8e9d93}
      \strng{fullhash}{719faded4591961d8ed2ddc1ff8e9d93}
      \strng{bibnamehash}{719faded4591961d8ed2ddc1ff8e9d93}
      \strng{authorbibnamehash}{719faded4591961d8ed2ddc1ff8e9d93}
      \strng{authornamehash}{719faded4591961d8ed2ddc1ff8e9d93}
      \strng{authorfullhash}{719faded4591961d8ed2ddc1ff8e9d93}
      \field{sortinit}{1}
      \field{sortinithash}{4f6aaa89bab872aa0999fec09ff8e98a}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{title}{Evaluation of Inter-Process Communication Mechanisms}
      \field{year}{2015}
      \verb{urlraw}
      \verb https://api.semanticscholar.org/CorpusID:6899525
      \endverb
      \verb{url}
      \verb https://api.semanticscholar.org/CorpusID:6899525
      \endverb
    \endentry
    \entry{SharedMemory}{inbook}{}
      \name{author}{1}{}{%
        {{hash=a4dfa4a15dd530d8dc5c104e8fb2337d}{%
           family={Wang},
           familyi={W\bibinitperiod},
           given={K.\bibnamedelimi C.},
           giveni={K\bibinitperiod\bibinitdelim C\bibinitperiod}}}%
      }
      \list{location}{1}{%
        {Cham}%
      }
      \list{publisher}{1}{%
        {Springer International Publishing}%
      }
      \strng{namehash}{a4dfa4a15dd530d8dc5c104e8fb2337d}
      \strng{fullhash}{a4dfa4a15dd530d8dc5c104e8fb2337d}
      \strng{bibnamehash}{a4dfa4a15dd530d8dc5c104e8fb2337d}
      \strng{authorbibnamehash}{a4dfa4a15dd530d8dc5c104e8fb2337d}
      \strng{authornamehash}{a4dfa4a15dd530d8dc5c104e8fb2337d}
      \strng{authorfullhash}{a4dfa4a15dd530d8dc5c104e8fb2337d}
      \field{sortinit}{1}
      \field{sortinithash}{4f6aaa89bab872aa0999fec09ff8e98a}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{abstract}{This chapter covers process management. It introduces the concept of processes and demonstrates the basic technique of multitasking by context switching. It shows how to create processes dynamically and discusses the goals, policy, and algorithms of process scheduling. It covers process synchronization and shows how to implement the various kinds of process synchronization mechanisms, which include sleep/wakeup, mutexes, and semaphores. It shows how to use the process synchronization mechanisms to implement event-driven embedded systems. It discusses interprocess communication (IPC) schemes, which include shared memory, pipes, and message passing. It shows how to integrate these concepts to implement a uniprocessor (UP) kernel for process management, and it shows the programming techniques for both non-preemptive and preemptive process scheduling. The UP kernel serves as the foundation for developing complete operating systems (OS) in later chapters.}
      \field{booktitle}{Embedded and Real-Time Operating Systems}
      \field{isbn}{978-3-031-28701-5}
      \field{title}{Process Management in Embedded Systems}
      \field{year}{2023}
      \field{pages}{115\bibrangedash 168}
      \range{pages}{54}
      \verb{doi}
      \verb 10.1007/978-3-031-28701-5_5
      \endverb
      \verb{urlraw}
      \verb https://doi.org/10.1007/978-3-031-28701-5_5
      \endverb
      \verb{url}
      \verb https://doi.org/10.1007/978-3-031-28701-5_5
      \endverb
    \endentry
    \entry{SharedMemoryMessagePassing}{article}{}
      \name{author}{6}{}{%
        {{hash=9456b7ccea841fa3f8894a658f46813e}{%
           family={Mogare},
           familyi={M\bibinitperiod},
           given={Sarvesh},
           giveni={S\bibinitperiod}}}%
        {{hash=44191d48f06462d060743c2eef2a5078}{%
           family={Mahamune},
           familyi={M\bibinitperiod},
           given={Abhijeet},
           giveni={A\bibinitperiod}}}%
        {{hash=8fb46dee6dcfe590c72875cfaa55784c}{%
           family={Sathe},
           familyi={S\bibinitperiod},
           given={Dipak},
           giveni={D\bibinitperiod}}}%
        {{hash=14f258dccc259eed4a5e62af6d8d6120}{%
           family={Bhangare},
           familyi={B\bibinitperiod},
           given={Harshal},
           giveni={H\bibinitperiod}}}%
        {{hash=ffef5248435a58f5a5a45e519b60cb7c}{%
           family={Deshmukh},
           familyi={D\bibinitperiod},
           given={Minal},
           giveni={M\bibinitperiod}}}%
        {{hash=224cbc20dd3a116719200ff5dffb3cbb}{%
           family={Ingale},
           familyi={I\bibinitperiod},
           given={Anup},
           giveni={A\bibinitperiod}}}%
      }
      \strng{namehash}{dd85982a7efd52d9c7de77f68d6811fe}
      \strng{fullhash}{34c16716cc6e7c74d4ee8945a2b0e307}
      \strng{bibnamehash}{34c16716cc6e7c74d4ee8945a2b0e307}
      \strng{authorbibnamehash}{34c16716cc6e7c74d4ee8945a2b0e307}
      \strng{authornamehash}{dd85982a7efd52d9c7de77f68d6811fe}
      \strng{authorfullhash}{34c16716cc6e7c74d4ee8945a2b0e307}
      \field{sortinit}{1}
      \field{sortinithash}{4f6aaa89bab872aa0999fec09ff8e98a}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{journaltitle}{International Research Journal of Modernization in Engineering Technology and Science (IRJMETS)}
      \field{month}{11}
      \field{title}{Message Passing VS Shared Memory-a Survey Of Trade Off In IPC}
      \field{volume}{06}
      \field{year}{2024}
    \endentry
    \entry{criticalSectionMutex}{inproceedings}{}
      \name{author}{4}{}{%
        {{hash=54280ee5d6c291b696b69461f4ced244}{%
           family={Suleman},
           familyi={S\bibinitperiod},
           given={M.\bibnamedelimi Aater},
           giveni={M\bibinitperiod\bibinitdelim A\bibinitperiod}}}%
        {{hash=5c37647ea7ea3d969c75fa814163e18f}{%
           family={Mutlu},
           familyi={M\bibinitperiod},
           given={Onur},
           giveni={O\bibinitperiod}}}%
        {{hash=dfdef60a424243feb8bd3e8293c4306f}{%
           family={Qureshi},
           familyi={Q\bibinitperiod},
           given={Moinuddin\bibnamedelima K.},
           giveni={M\bibinitperiod\bibinitdelim K\bibinitperiod}}}%
        {{hash=8fcb98f713d8a5893c333afc73f5e16b}{%
           family={Patt},
           familyi={P\bibinitperiod},
           given={Yale\bibnamedelima N.},
           giveni={Y\bibinitperiod\bibinitdelim N\bibinitperiod}}}%
      }
      \list{location}{1}{%
        {Washington, DC, USA}%
      }
      \list{publisher}{1}{%
        {Association for Computing Machinery}%
      }
      \strng{namehash}{00c43079dae7459654cc15c5b2854ec3}
      \strng{fullhash}{b5bdfed2125cff6f217db347faf9a651}
      \strng{bibnamehash}{b5bdfed2125cff6f217db347faf9a651}
      \strng{authorbibnamehash}{b5bdfed2125cff6f217db347faf9a651}
      \strng{authornamehash}{00c43079dae7459654cc15c5b2854ec3}
      \strng{authorfullhash}{b5bdfed2125cff6f217db347faf9a651}
      \field{sortinit}{1}
      \field{sortinithash}{4f6aaa89bab872aa0999fec09ff8e98a}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{abstract}{To improve the performance of a single application on Chip Multiprocessors (CMPs), the application must be split into threads which execute concurrently on multiple cores. In multi-threaded applications, critical sections are used to ensure that only one thread accesses shared data at any given time. Critical sections can serialize the execution of threads, which significantly reduces performance and scalability.This paper proposes Accelerated Critical Sections (ACS), a technique that leverages the high-performance core(s) of an Asymmetric Chip Multiprocessor (ACMP) to accelerate the execution of critical sections. In ACS, selected critical sections are executed by a high-performance core, which can execute the critical section faster than the other, smaller cores. As a result, ACS reduces serialization: it lowers the likelihood of threads waiting for a critical section to finish. Our evaluation on a set of 12 critical-section-intensive workloads shows that ACS reduces the average execution time by 34\% compared to an equal-area 32T-core symmetric CMP and by 23\% compared to an equal-area ACMP. Moreover, for 7 out of the 12 workloads, ACS improves scalability by increasing the number of threads at which performance saturates.}
      \field{booktitle}{Proceedings of the 14th International Conference on Architectural Support for Programming Languages and Operating Systems}
      \field{isbn}{9781605584065}
      \field{series}{ASPLOS XIV}
      \field{title}{Accelerating critical section execution with asymmetric multi-core architectures}
      \field{year}{2009}
      \field{pages}{253\bibrangedash 264}
      \range{pages}{12}
      \verb{doi}
      \verb 10.1145/1508244.1508274
      \endverb
      \verb{urlraw}
      \verb https://doi.org/10.1145/1508244.1508274
      \endverb
      \verb{url}
      \verb https://doi.org/10.1145/1508244.1508274
      \endverb
      \keyw{cmp,critical sections,heterogeneous cores,locks,multi-core,parallel programming}
    \endentry
    \entry{DiffProcessThread}{misc}{}
      \field{sortinit}{1}
      \field{sortinithash}{4f6aaa89bab872aa0999fec09ff8e98a}
      \field{labeltitlesource}{title}
      \field{howpublished}{\url{https://opensourceforgeeks.blogspot.com/2014/01/race-condition-synchronization-atomic.html}}
      \field{title}{Difference between Process and Thread}
      \field{year}{2025}
    \endentry
    \entry{Race-Condition}{misc}{}
      \name{author}{1}{}{%
        {{hash=e11d1e2904679f3038721779f8c47dfd}{%
           family={Thakur},
           familyi={T\bibinitperiod},
           given={Aniket},
           giveni={A\bibinitperiod}}}%
      }
      \strng{namehash}{e11d1e2904679f3038721779f8c47dfd}
      \strng{fullhash}{e11d1e2904679f3038721779f8c47dfd}
      \strng{bibnamehash}{e11d1e2904679f3038721779f8c47dfd}
      \strng{authorbibnamehash}{e11d1e2904679f3038721779f8c47dfd}
      \strng{authornamehash}{e11d1e2904679f3038721779f8c47dfd}
      \strng{authorfullhash}{e11d1e2904679f3038721779f8c47dfd}
      \field{sortinit}{1}
      \field{sortinithash}{4f6aaa89bab872aa0999fec09ff8e98a}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{howpublished}{\url{https://opensourceforgeeks.blogspot.com/2014/01/race-condition-synchronization-atomic.html}}
      \field{title}{Race Condition, Synchronization, atomic operations and Volatile keyword.}
      \field{year}{2014}
    \endentry
    \entry{MutualExclusion}{misc}{}
      \field{sortinit}{1}
      \field{sortinithash}{4f6aaa89bab872aa0999fec09ff8e98a}
      \field{labeltitlesource}{title}
      \field{howpublished}{\url{https://realtimepartner.com/articles/mutual-exclusion.html}}
      \field{title}{Managing Mutual Exclusion Mechanism for Real-Time Applications}
      \field{year}{2016}
    \endentry
    \entry{MutexSemaphoreIPC}{inproceedings}{}
      \name{author}{1}{}{%
        {{hash=6f8e25e905de2b384afd35c821febc59}{%
           family={Raghunathan},
           familyi={R\bibinitperiod},
           given={Sriram},
           giveni={S\bibinitperiod}}}%
      }
      \strng{namehash}{6f8e25e905de2b384afd35c821febc59}
      \strng{fullhash}{6f8e25e905de2b384afd35c821febc59}
      \strng{bibnamehash}{6f8e25e905de2b384afd35c821febc59}
      \strng{authorbibnamehash}{6f8e25e905de2b384afd35c821febc59}
      \strng{authornamehash}{6f8e25e905de2b384afd35c821febc59}
      \strng{authorfullhash}{6f8e25e905de2b384afd35c821febc59}
      \field{sortinit}{1}
      \field{sortinithash}{4f6aaa89bab872aa0999fec09ff8e98a}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{booktitle}{2008 14th IEEE International Conference on Parallel and Distributed Systems}
      \field{title}{Extending Inter-process Synchronization with Robust Mutex and Variants in Condition Wait}
      \field{year}{2008}
      \field{pages}{121\bibrangedash 128}
      \range{pages}{8}
      \verb{doi}
      \verb 10.1109/ICPADS.2008.98
      \endverb
      \keyw{Robustness;Yarn;Libraries;Linux;Application software;Kernel;Content addressable storage;Context-aware services;Protection;Event detection;Condition Wait;Mutexes;FIFO Waiters;Semaphores;Signaling and Synchronization}
    \endentry
    \entry{Deadlock}{misc}{}
      \field{sortinit}{1}
      \field{sortinithash}{4f6aaa89bab872aa0999fec09ff8e98a}
      \field{labeltitlesource}{title}
      \field{howpublished}{\url{https://www.geeksforgeeks.org/introduction-of-deadlock-in-operating-system/}}
      \field{title}{Introduction of Deadlock in Operating System}
      \field{year}{2025}
    \endentry
    \entry{Starvation}{inbook}{}
      \name{author}{1}{}{%
        {{hash=a228256fe74a44f7da1f2879d472b9ff}{%
           family={Buhr},
           familyi={B\bibinitperiod},
           given={Peter\bibnamedelima A.},
           giveni={P\bibinitperiod\bibinitdelim A\bibinitperiod}}}%
      }
      \list{location}{1}{%
        {Cham}%
      }
      \list{publisher}{1}{%
        {Springer International Publishing}%
      }
      \strng{namehash}{a228256fe74a44f7da1f2879d472b9ff}
      \strng{fullhash}{a228256fe74a44f7da1f2879d472b9ff}
      \strng{bibnamehash}{a228256fe74a44f7da1f2879d472b9ff}
      \strng{authorbibnamehash}{a228256fe74a44f7da1f2879d472b9ff}
      \strng{authornamehash}{a228256fe74a44f7da1f2879d472b9ff}
      \strng{authorfullhash}{a228256fe74a44f7da1f2879d472b9ff}
      \field{sortinit}{1}
      \field{sortinithash}{4f6aaa89bab872aa0999fec09ff8e98a}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{abstract}{The introduction of threads and locks into a programming language introduces new kinds of errors not present in sequential programming; several of these errors have been mentioned in previous chapters. When writing concurrent programs, it is important to understand the new kinds of errors so they can be avoided or debugged when they occur. Therefore, it is appropriate to take a short diversion from the discussion of specifying concurrency to explain these new programming problems.}
      \field{booktitle}{Understanding Control Flow: Concurrent Programming Using $\mu$C++}
      \field{isbn}{978-3-319-25703-7}
      \field{title}{Concurrency Errors}
      \field{year}{2016}
      \field{pages}{395\bibrangedash 423}
      \range{pages}{29}
      \verb{doi}
      \verb 10.1007/978-3-319-25703-7_8
      \endverb
      \verb{urlraw}
      \verb https://doi.org/10.1007/978-3-319-25703-7_8
      \endverb
      \verb{url}
      \verb https://doi.org/10.1007/978-3-319-25703-7_8
      \endverb
    \endentry
    \entry{chahar2013deadlock}{article}{}
      \name{author}{2}{}{%
        {{hash=0a709ec82a393eab0a17ed1e6e72562b}{%
           family={Chahar},
           familyi={C\bibinitperiod},
           given={Pooja},
           giveni={P\bibinitperiod}}}%
        {{hash=11e60e35b40ac89df1aa975d8579f368}{%
           family={Dalal},
           familyi={D\bibinitperiod},
           given={Surjeet},
           giveni={S\bibinitperiod}}}%
      }
      \list{publisher}{1}{%
        {Citeseer}%
      }
      \strng{namehash}{755293b18daee9403f0d3951edb7dbfd}
      \strng{fullhash}{755293b18daee9403f0d3951edb7dbfd}
      \strng{bibnamehash}{755293b18daee9403f0d3951edb7dbfd}
      \strng{authorbibnamehash}{755293b18daee9403f0d3951edb7dbfd}
      \strng{authornamehash}{755293b18daee9403f0d3951edb7dbfd}
      \strng{authorfullhash}{755293b18daee9403f0d3951edb7dbfd}
      \field{sortinit}{1}
      \field{sortinithash}{4f6aaa89bab872aa0999fec09ff8e98a}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{journaltitle}{International Journal of Scientific and Research Publications}
      \field{number}{7}
      \field{title}{Deadlock resolution techniques: an overview}
      \field{volume}{3}
      \field{year}{2013}
      \field{pages}{1\bibrangedash 5}
      \range{pages}{5}
    \endentry
    \entry{priorityInversion}{article}{}
      \name{author}{5}{}{%
        {{hash=8e448470980462cb6c82de10f864754c}{%
           family={Wang},
           familyi={W\bibinitperiod},
           given={Yun},
           giveni={Y\bibinitperiod}}}%
        {{hash=2a5d97744ec5a0e9e2b2963c742e69ea}{%
           family={Anceaume},
           familyi={A\bibinitperiod},
           given={E.},
           giveni={E\bibinitperiod}}}%
        {{hash=95d8c20619ed410940d7cc9ad2a1cacc}{%
           family={Brasileiro},
           familyi={B\bibinitperiod},
           given={F.},
           giveni={F\bibinitperiod}}}%
        {{hash=45a450ab5a31bf3c8115cb6ed02c9505}{%
           family={Greve},
           familyi={G\bibinitperiod},
           given={F.},
           giveni={F\bibinitperiod}}}%
        {{hash=418a6ed97360cfbc378d5e94b1528f47}{%
           family={Hurfin},
           familyi={H\bibinitperiod},
           given={M.},
           giveni={M\bibinitperiod}}}%
      }
      \strng{namehash}{6e843a47f7f3a29ffac089bdf61fc944}
      \strng{fullhash}{e2dc99b12632932c3949fed4adb01e1b}
      \strng{bibnamehash}{e2dc99b12632932c3949fed4adb01e1b}
      \strng{authorbibnamehash}{e2dc99b12632932c3949fed4adb01e1b}
      \strng{authornamehash}{6e843a47f7f3a29ffac089bdf61fc944}
      \strng{authorfullhash}{e2dc99b12632932c3949fed4adb01e1b}
      \field{sortinit}{2}
      \field{sortinithash}{8b555b3791beccb63322c22f3320aa9a}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{journaltitle}{IEEE Transactions on Computers}
      \field{number}{8}
      \field{title}{Solving the group priority inversion problem in a timed asynchronous system}
      \field{volume}{51}
      \field{year}{2002}
      \field{pages}{900\bibrangedash 915}
      \range{pages}{16}
      \verb{doi}
      \verb 10.1109/TC.2002.1024738
      \endverb
      \keyw{Protocols;Fault tolerant systems;Real time systems;Delay;Synchronization;Computer Society;Processor scheduling;Mechanical factors;Predictive models;Detectors}
    \endentry
    \entry{MichaelScottQueue}{article}{}
      \name{author}{2}{}{%
        {{hash=25eb73e078c493795f2e89b87026f5d6}{%
           family={Michael},
           familyi={M\bibinitperiod},
           given={Maged},
           giveni={M\bibinitperiod}}}%
        {{hash=3893da43fef5984af81132419014206c}{%
           family={Scott},
           familyi={S\bibinitperiod},
           given={Michael},
           giveni={M\bibinitperiod}}}%
      }
      \strng{namehash}{8f07431bff4d70645767ccb4a004a377}
      \strng{fullhash}{8f07431bff4d70645767ccb4a004a377}
      \strng{bibnamehash}{8f07431bff4d70645767ccb4a004a377}
      \strng{authorbibnamehash}{8f07431bff4d70645767ccb4a004a377}
      \strng{authornamehash}{8f07431bff4d70645767ccb4a004a377}
      \strng{authorfullhash}{8f07431bff4d70645767ccb4a004a377}
      \field{extraname}{2}
      \field{sortinit}{2}
      \field{sortinithash}{8b555b3791beccb63322c22f3320aa9a}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{journaltitle}{Proceedings of the Annual ACM Symposium on Principles of Distributed Computing}
      \field{month}{03}
      \field{title}{Simple, Fast, and Practical Non-Blocking and Blocking Concurrent Queue Algorithms}
      \field{year}{1996}
      \verb{doi}
      \verb 10.1145/248052.248106
      \endverb
    \endentry
    \entry{culic2022lowRust}{article}{}
      \name{author}{3}{}{%
        {{hash=7dc4963acf013ed23b1870b57c1da113}{%
           family={Culic},
           familyi={C\bibinitperiod},
           given={Ioana},
           giveni={I\bibinitperiod}}}%
        {{hash=4fd697bbf6073ab1c8740e70866f7059}{%
           family={Vochescu},
           familyi={V\bibinitperiod},
           given={Alexandru},
           giveni={A\bibinitperiod}}}%
        {{hash=ed6fc99dc38b9bb89de3c717c6298176}{%
           family={Radovici},
           familyi={R\bibinitperiod},
           given={Alexandru},
           giveni={A\bibinitperiod}}}%
      }
      \list{publisher}{1}{%
        {MDPI}%
      }
      \strng{namehash}{452473b2cc3b7c02720440ff1a56c9bf}
      \strng{fullhash}{7324f31d24e4f761a728cfb99f7e66a5}
      \strng{bibnamehash}{7324f31d24e4f761a728cfb99f7e66a5}
      \strng{authorbibnamehash}{7324f31d24e4f761a728cfb99f7e66a5}
      \strng{authornamehash}{452473b2cc3b7c02720440ff1a56c9bf}
      \strng{authorfullhash}{7324f31d24e4f761a728cfb99f7e66a5}
      \field{sortinit}{3}
      \field{sortinithash}{ad6fe7482ffbd7b9f99c9e8b5dccd3d7}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{journaltitle}{Sensors}
      \field{number}{22}
      \field{title}{A low-latency optimization of a rust-based secure operating system for embedded devices}
      \field{volume}{22}
      \field{year}{2022}
      \field{pages}{8700}
      \range{pages}{1}
    \endentry
    \entry{Lamport1977ConcurrentReading}{article}{}
      \name{author}{1}{}{%
        {{hash=5d77435450d10a850a5b58577b9a456b}{%
           family={Lamport},
           familyi={L\bibinitperiod},
           given={Leslie},
           giveni={L\bibinitperiod}}}%
      }
      \list{location}{1}{%
        {New York, NY, USA}%
      }
      \list{publisher}{1}{%
        {Association for Computing Machinery}%
      }
      \strng{namehash}{5d77435450d10a850a5b58577b9a456b}
      \strng{fullhash}{5d77435450d10a850a5b58577b9a456b}
      \strng{bibnamehash}{5d77435450d10a850a5b58577b9a456b}
      \strng{authorbibnamehash}{5d77435450d10a850a5b58577b9a456b}
      \strng{authornamehash}{5d77435450d10a850a5b58577b9a456b}
      \strng{authorfullhash}{5d77435450d10a850a5b58577b9a456b}
      \field{extraname}{1}
      \field{sortinit}{3}
      \field{sortinithash}{ad6fe7482ffbd7b9f99c9e8b5dccd3d7}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{abstract}{The problem of sharing data among asynchronous processes is considered. It is assumed that only one process at a time can modify the data, but concurrent reading and writing is permitted. Two general theorems are proved, and some algorithms are presented to illustrate their use. These include a solution to the general problem in which a read is repeated if it might have obtained an incorrect result, and two techniques for transmitting messages between processes. These solutions do not assume any synchronizing mechanism other than data which can be written by one process and read by other processes.}
      \field{issn}{0001-0782}
      \field{journaltitle}{Commun. ACM}
      \field{month}{11}
      \field{number}{11}
      \field{title}{Concurrent reading and writing}
      \field{volume}{20}
      \field{year}{1977}
      \field{pages}{806\bibrangedash 811}
      \range{pages}{6}
      \verb{doi}
      \verb 10.1145/359863.359878
      \endverb
      \verb{urlraw}
      \verb https://doi.org/10.1145/359863.359878
      \endverb
      \verb{url}
      \verb https://doi.org/10.1145/359863.359878
      \endverb
      \keyw{asynchronous multiprocessing,multiprocess synchronization,readers/writers problem,shared data}
    \endentry
    \entry{Lamport1983SPSCCircularBuffer}{article}{}
      \name{author}{1}{}{%
        {{hash=5d77435450d10a850a5b58577b9a456b}{%
           family={Lamport},
           familyi={L\bibinitperiod},
           given={Leslie},
           giveni={L\bibinitperiod}}}%
      }
      \list{location}{1}{%
        {New York, NY, USA}%
      }
      \list{publisher}{1}{%
        {Association for Computing Machinery}%
      }
      \strng{namehash}{5d77435450d10a850a5b58577b9a456b}
      \strng{fullhash}{5d77435450d10a850a5b58577b9a456b}
      \strng{bibnamehash}{5d77435450d10a850a5b58577b9a456b}
      \strng{authorbibnamehash}{5d77435450d10a850a5b58577b9a456b}
      \strng{authornamehash}{5d77435450d10a850a5b58577b9a456b}
      \strng{authorfullhash}{5d77435450d10a850a5b58577b9a456b}
      \field{extraname}{2}
      \field{sortinit}{3}
      \field{sortinithash}{ad6fe7482ffbd7b9f99c9e8b5dccd3d7}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{issn}{0164-0925}
      \field{journaltitle}{ACM Trans. Program. Lang. Syst.}
      \field{month}{4}
      \field{number}{2}
      \field{title}{Specifying Concurrent Program Modules}
      \field{volume}{5}
      \field{year}{1983}
      \field{pages}{190\bibrangedash 222}
      \range{pages}{33}
      \verb{doi}
      \verb 10.1145/69624.357207
      \endverb
      \verb{urlraw}
      \verb https://doi.org/10.1145/69624.357207
      \endverb
      \verb{url}
      \verb https://doi.org/10.1145/69624.357207
      \endverb
    \endentry
    \entry{HerlihyLinearizability}{article}{}
      \name{author}{2}{}{%
        {{hash=1a43fda3140a3de5a1ad7b3dd9694ff7}{%
           family={Herlihy},
           familyi={H\bibinitperiod},
           given={Maurice\bibnamedelima P.},
           giveni={M\bibinitperiod\bibinitdelim P\bibinitperiod}}}%
        {{hash=fc244460284339da385f5113c9207b79}{%
           family={Wing},
           familyi={W\bibinitperiod},
           given={Jeannette\bibnamedelima M.},
           giveni={J\bibinitperiod\bibinitdelim M\bibinitperiod}}}%
      }
      \list{location}{1}{%
        {New York, NY, USA}%
      }
      \list{publisher}{1}{%
        {Association for Computing Machinery}%
      }
      \strng{namehash}{a5eadd65db9af944abc0097da217346d}
      \strng{fullhash}{a5eadd65db9af944abc0097da217346d}
      \strng{bibnamehash}{a5eadd65db9af944abc0097da217346d}
      \strng{authorbibnamehash}{a5eadd65db9af944abc0097da217346d}
      \strng{authornamehash}{a5eadd65db9af944abc0097da217346d}
      \strng{authorfullhash}{a5eadd65db9af944abc0097da217346d}
      \field{sortinit}{3}
      \field{sortinithash}{ad6fe7482ffbd7b9f99c9e8b5dccd3d7}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{abstract}{A concurrent object is a data object shared by concurrent processes. Linearizability is a correctness condition for concurrent objects that exploits the semantics of abstract data types. It permits a high degree of concurrency, yet it permits programmers to specify and reason about concurrent objects using known techniques from the sequential domain. Linearizability provides the illusion that each operation applied by concurrent processes takes effect instantaneously at some point between its invocation and its response, implying that the meaning of a concurrent object's operations can be given by pre- and post-conditions. This paper defines linearizability, compares it to other correctness conditions, presents and demonstrates a method for proving the correctness of implementations, and shows how to reason about concurrent objects, given they are linearizable.}
      \field{issn}{0164-0925}
      \field{journaltitle}{ACM Trans. Program. Lang. Syst.}
      \field{month}{7}
      \field{number}{3}
      \field{title}{Linearizability: a correctness condition for concurrent objects}
      \field{volume}{12}
      \field{year}{1990}
      \field{pages}{463\bibrangedash 492}
      \range{pages}{30}
      \verb{doi}
      \verb 10.1145/78969.78972
      \endverb
      \verb{urlraw}
      \verb https://doi.org/10.1145/78969.78972
      \endverb
      \verb{url}
      \verb https://doi.org/10.1145/78969.78972
      \endverb
    \endentry
    \entry{naderibeni2023waitfreequeuepolylogarithmicstep}{misc}{}
      \name{author}{2}{}{%
        {{hash=961dfd6665995ba159d0c5d4ffe86d33}{%
           family={Naderibeni},
           familyi={N\bibinitperiod},
           given={Hossein},
           giveni={H\bibinitperiod}}}%
        {{hash=95a70219729d51b1acf9994c0df4799f}{%
           family={Ruppert},
           familyi={R\bibinitperiod},
           given={Eric},
           giveni={E\bibinitperiod}}}%
      }
      \strng{namehash}{57323409a5ceee0e64ca3e31e04f42a8}
      \strng{fullhash}{57323409a5ceee0e64ca3e31e04f42a8}
      \strng{bibnamehash}{57323409a5ceee0e64ca3e31e04f42a8}
      \strng{authorbibnamehash}{57323409a5ceee0e64ca3e31e04f42a8}
      \strng{authornamehash}{57323409a5ceee0e64ca3e31e04f42a8}
      \strng{authorfullhash}{57323409a5ceee0e64ca3e31e04f42a8}
      \field{sortinit}{3}
      \field{sortinithash}{ad6fe7482ffbd7b9f99c9e8b5dccd3d7}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{eprintclass}{cs.DC}
      \field{eprinttype}{arXiv}
      \field{title}{A Wait-free Queue with Polylogarithmic Step Complexity}
      \field{year}{2023}
      \verb{eprint}
      \verb 2305.07229
      \endverb
      \verb{urlraw}
      \verb https://arxiv.org/abs/2305.07229
      \endverb
      \verb{url}
      \verb https://arxiv.org/abs/2305.07229
      \endverb
    \endentry
    \entry{wCQWaitFreeQueue}{inproceedings}{}
      \name{author}{2}{}{%
        {{hash=f05752d008c1e9536a4347edecbfe5de}{%
           family={Nikolaev},
           familyi={N\bibinitperiod},
           given={Ruslan},
           giveni={R\bibinitperiod}}}%
        {{hash=4b7b20a645f1ce1fc9d078ff9c6a0104}{%
           family={Ravindran},
           familyi={R\bibinitperiod},
           given={Binoy},
           giveni={B\bibinitperiod}}}%
      }
      \list{location}{1}{%
        {Seoul, Republic of Korea}%
      }
      \list{publisher}{1}{%
        {Association for Computing Machinery}%
      }
      \strng{namehash}{90634ef7d967fd7fba143f72186d4e87}
      \strng{fullhash}{90634ef7d967fd7fba143f72186d4e87}
      \strng{bibnamehash}{90634ef7d967fd7fba143f72186d4e87}
      \strng{authorbibnamehash}{90634ef7d967fd7fba143f72186d4e87}
      \strng{authornamehash}{90634ef7d967fd7fba143f72186d4e87}
      \strng{authorfullhash}{90634ef7d967fd7fba143f72186d4e87}
      \field{sortinit}{3}
      \field{sortinithash}{ad6fe7482ffbd7b9f99c9e8b5dccd3d7}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{abstract}{The concurrency literature presents a number of approaches for building non-blocking, FIFO, multiple-producer and multiple-consumer (MPMC) queues. However, existing wait-free queues are either not very scalable or suffer from potentially unbounded memory usage. We present a wait-free queue, wCQ, which uses its own variation of the fast-path-slow-path methodology to attain wait-freedom and bound memory usage. wCQ is memory efficient and its performance is often on par with the best known concurrent queue designs.}
      \field{booktitle}{Proceedings of the 27th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming}
      \field{isbn}{9781450392044}
      \field{series}{PPoPP '22}
      \field{title}{wCQ: a fast wait-free queue with bounded memory usage}
      \field{year}{2022}
      \field{pages}{461\bibrangedash 462}
      \range{pages}{2}
      \verb{doi}
      \verb 10.1145/3503221.3508440
      \endverb
      \verb{urlraw}
      \verb https://doi.org/10.1145/3503221.3508440
      \endverb
      \verb{url}
      \verb https://doi.org/10.1145/3503221.3508440
      \endverb
      \keyw{FIFO queue,ring buffer,wait-free}
    \endentry
    \entry{WaitFreeQueueWithWaitFreeMemoryReclamation}{inproceedings}{}
      \name{author}{2}{}{%
        {{hash=0d6863606a4572f22563b4c94aca9733}{%
           family={Ramalhete},
           familyi={R\bibinitperiod},
           given={Pedro},
           giveni={P\bibinitperiod}}}%
        {{hash=4a3ea75ba26a4b444b69d07dfecc5f09}{%
           family={Correia},
           familyi={C\bibinitperiod},
           given={Andreia},
           giveni={A\bibinitperiod}}}%
      }
      \list{location}{1}{%
        {Austin, Texas, USA}%
      }
      \list{publisher}{1}{%
        {Association for Computing Machinery}%
      }
      \strng{namehash}{a3e766b5e3097816c2d98a368fc140a5}
      \strng{fullhash}{a3e766b5e3097816c2d98a368fc140a5}
      \strng{bibnamehash}{a3e766b5e3097816c2d98a368fc140a5}
      \strng{authorbibnamehash}{a3e766b5e3097816c2d98a368fc140a5}
      \strng{authornamehash}{a3e766b5e3097816c2d98a368fc140a5}
      \strng{authorfullhash}{a3e766b5e3097816c2d98a368fc140a5}
      \field{sortinit}{3}
      \field{sortinithash}{ad6fe7482ffbd7b9f99c9e8b5dccd3d7}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{abstract}{Queues are a widely deployed data structure. They are used extensively in many multi threaded applications, or as a communication mechanism between threads or processes. We propose a new linearizable multi-producer-multi-consumer queue we named Turn queue, with wait-free progress bounded by the number of threads, and with wait-free bounded memory reclamation. Its main characteristics are: a simple algorithm that does no memory allocation apart from creating the node that is placed in the queue, a new wait-free consensus algorithm using only the atomic instruction compare-and-swap (CAS), and is easy to plugin with other algorithms for either enqueue or dequeue methods.}
      \field{booktitle}{Proceedings of the 22nd ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming}
      \field{isbn}{9781450344937}
      \field{series}{PPoPP '17}
      \field{title}{POSTER: A Wait-Free Queue with Wait-Free Memory Reclamation}
      \field{year}{2017}
      \field{pages}{453\bibrangedash 454}
      \range{pages}{2}
      \verb{doi}
      \verb 10.1145/3018743.3019022
      \endverb
      \verb{urlraw}
      \verb https://doi.org/10.1145/3018743.3019022
      \endverb
      \verb{url}
      \verb https://doi.org/10.1145/3018743.3019022
      \endverb
      \keyw{low latency,non-blocking queue,wait-free}
    \endentry
    \entry{Kogan2011WaitFreeQueues}{article}{}
      \name{author}{2}{}{%
        {{hash=fdcad8e75af2ff8226f3804288eeebb7}{%
           family={Kogan},
           familyi={K\bibinitperiod},
           given={Alex},
           giveni={A\bibinitperiod}}}%
        {{hash=468fe0329ffeea43782aa0c27eaf16fe}{%
           family={Petrank},
           familyi={P\bibinitperiod},
           given={Erez},
           giveni={E\bibinitperiod}}}%
      }
      \list{location}{1}{%
        {New York, NY, USA}%
      }
      \list{publisher}{1}{%
        {Association for Computing Machinery}%
      }
      \strng{namehash}{4b9a61a33ee74fcc51fd2bd3b2ab3602}
      \strng{fullhash}{4b9a61a33ee74fcc51fd2bd3b2ab3602}
      \strng{bibnamehash}{4b9a61a33ee74fcc51fd2bd3b2ab3602}
      \strng{authorbibnamehash}{4b9a61a33ee74fcc51fd2bd3b2ab3602}
      \strng{authornamehash}{4b9a61a33ee74fcc51fd2bd3b2ab3602}
      \strng{authorfullhash}{4b9a61a33ee74fcc51fd2bd3b2ab3602}
      \field{extraname}{2}
      \field{sortinit}{3}
      \field{sortinithash}{ad6fe7482ffbd7b9f99c9e8b5dccd3d7}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{abstract}{The queue data structure is fundamental and ubiquitous. Lock-free versions of the queue are well known. However, an important open question is whether practical wait-free queues exist. Until now, only versions with limited concurrency were proposed. In this paper we provide a design for a practical wait-free queue. Our construction is based on the highly efficient lock-free queue of Michael and Scott. To achieve wait-freedom, we employ a priority-based helping scheme in which faster threads help the slower peers to complete their pending operations. We have implemented our scheme on multicore machines and present performance measurements comparing our implementation with that of Michael and Scott in several system configurations.}
      \field{issn}{0362-1340}
      \field{journaltitle}{SIGPLAN Not.}
      \field{month}{2}
      \field{number}{8}
      \field{title}{Wait-free queues with multiple enqueuers and dequeuers}
      \field{volume}{46}
      \field{year}{2011}
      \field{pages}{223\bibrangedash 234}
      \range{pages}{12}
      \verb{doi}
      \verb 10.1145/2038037.1941585
      \endverb
      \verb{urlraw}
      \verb https://doi.org/10.1145/2038037.1941585
      \endverb
      \verb{url}
      \verb https://doi.org/10.1145/2038037.1941585
      \endverb
      \keyw{wait-free algorithms,concurrent queues}
    \endentry
    \entry{FastFetchAndAddWaitFreeQueue}{article}{}
      \name{author}{2}{}{%
        {{hash=0956a3b98766209bb5506efb6a250dc7}{%
           family={Yang},
           familyi={Y\bibinitperiod},
           given={Chaoran},
           giveni={C\bibinitperiod}}}%
        {{hash=853d1926d31c5d176cf0adc530f99efa}{%
           family={Mellor-Crummey},
           familyi={M\bibinithyphendelim C\bibinitperiod},
           given={John},
           giveni={J\bibinitperiod}}}%
      }
      \list{location}{1}{%
        {New York, NY, USA}%
      }
      \list{publisher}{1}{%
        {Association for Computing Machinery}%
      }
      \strng{namehash}{92c2b603305ad567504e8c57d20fc062}
      \strng{fullhash}{92c2b603305ad567504e8c57d20fc062}
      \strng{bibnamehash}{92c2b603305ad567504e8c57d20fc062}
      \strng{authorbibnamehash}{92c2b603305ad567504e8c57d20fc062}
      \strng{authornamehash}{92c2b603305ad567504e8c57d20fc062}
      \strng{authorfullhash}{92c2b603305ad567504e8c57d20fc062}
      \field{sortinit}{3}
      \field{sortinithash}{ad6fe7482ffbd7b9f99c9e8b5dccd3d7}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{abstract}{Concurrent data structures that have fast and predictable performance are of critical importance for harnessing the power of multicore processors, which are now ubiquitous. Although wait-free objects, whose operations complete in a bounded number of steps, were devised more than two decades ago, wait-free objects that can deliver scalable high performance are still rare.In this paper, we present the first wait-free FIFO queue based on fetch-and-add (FAA). While compare-and-swap (CAS) based non-blocking algorithms may perform poorly due to work wasted by CAS failures, algorithms that coordinate using FAA, which is guaranteed to succeed, can in principle perform better under high contention. Along with FAA, our queue uses a custom epoch-based scheme to reclaim memory; on x86 architectures, it requires no extra memory fences on our algorithm's typical execution path. An empirical study of our new FAA-based wait-free FIFO queue under high contention on four different architectures with many hardware threads shows that it outperforms prior queue designs that lack a wait-free progress guarantee. Surprisingly, at the highest level of contention, the throughput of our queue is often as high as that of a microbenchmark that only performs FAA. As a result, our fast wait-free queue implementation is useful in practice on most multi-core systems today. We believe that our design can serve as an example of how to construct other fast wait-free objects.}
      \field{issn}{0362-1340}
      \field{journaltitle}{SIGPLAN Not.}
      \field{month}{2}
      \field{number}{8}
      \field{title}{A wait-free queue as fast as fetch-and-add}
      \field{volume}{51}
      \field{year}{2016}
      \verb{doi}
      \verb 10.1145/3016078.2851168
      \endverb
      \verb{urlraw}
      \verb https://doi.org/10.1145/3016078.2851168
      \endverb
      \verb{url}
      \verb https://doi.org/10.1145/3016078.2851168
      \endverb
      \keyw{fast-path-slow-path,non-blocking queue,wait-free}
    \endentry
    \entry{jiffy}{article}{}
      \name{author}{2}{}{%
        {{hash=c4857a9fb983af0770322cf0d6ffab92}{%
           family={Adas},
           familyi={A\bibinitperiod},
           given={Dolev},
           giveni={D\bibinitperiod}}}%
        {{hash=2a5497b630106858c42489823a43b8a5}{%
           family={Friedman},
           familyi={F\bibinitperiod},
           given={Roy},
           giveni={R\bibinitperiod}}}%
      }
      \strng{namehash}{dc956c6385edb57f65a48b3cffac3eee}
      \strng{fullhash}{dc956c6385edb57f65a48b3cffac3eee}
      \strng{bibnamehash}{dc956c6385edb57f65a48b3cffac3eee}
      \strng{authorbibnamehash}{dc956c6385edb57f65a48b3cffac3eee}
      \strng{authornamehash}{dc956c6385edb57f65a48b3cffac3eee}
      \strng{authorfullhash}{dc956c6385edb57f65a48b3cffac3eee}
      \field{sortinit}{4}
      \field{sortinithash}{9381316451d1b9788675a07e972a12a7}
      \field{labelnamesource}{author}
      \field{labeltitlesource}{title}
      \field{eprinttype}{arXiv}
      \field{journaltitle}{CoRR}
      \field{title}{Jiffy: {A} Fast, Memory Efficient, Wait-Free Multi-Producers Single-Consumer Queue}
      \field{volume}{abs/2010.14189}
      \field{year}{2020}
      \verb{eprint}
      \verb 2010.14189
      \endverb
      \verb{urlraw}
      \verb https://arxiv.org/abs/2010.14189
      \endverb
      \verb{url}
      \verb https://arxiv.org/abs/2010.14189
      \endverb
    \endentry
  \enddatalist
\endrefsection
\endinput

